{"/home/travis/build/npmtest/node-npmtest-json-server/test.js":"/* istanbul instrument in package npmtest_json_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-server/lib.npmtest_json_server.js":"/* istanbul instrument in package npmtest_json_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_json_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_json_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-json-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-json-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_json_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_json_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_json_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_json_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_json_server.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_json_server.__dirname +\n                    '/lib.npmtest_json_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/index.js":"'use strict';\n\nvar express = require('express');\n\nmodule.exports = {\n  create: function create() {\n    return express().set('json spaces', 2);\n  },\n  defaults: require('./defaults'),\n  router: require('./router'),\n  rewriter: require('./rewriter'),\n  bodyParser: require('./body-parser')\n};","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/defaults.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar express = require('express');\nvar logger = require('morgan');\nvar cors = require('cors');\nvar compression = require('compression');\nvar errorhandler = require('errorhandler');\nvar objectAssign = require('object-assign');\n\nmodule.exports = function (opts) {\n  var userDir = path.join(process.cwd(), 'public');\n  var defaultDir = path.join(__dirname, 'public');\n  var staticDir = fs.existsSync(userDir) ? userDir : defaultDir;\n\n  opts = objectAssign({ logger: true, static: staticDir }, opts);\n\n  var arr = [];\n\n  // Compress all requests\n  if (!opts.noGzip) {\n    arr.push(compression());\n  }\n\n  // Logger\n  if (opts.logger) {\n    arr.push(logger('dev', {\n      skip: function skip(req) {\n        return process.env.NODE_ENV === 'test' || req.path === '/favicon.ico';\n      }\n    }));\n  }\n\n  // Enable CORS for all the requests, including static files\n  if (!opts.noCors) {\n    arr.push(cors({ origin: true, credentials: true }));\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // only use in development\n    arr.push(errorhandler());\n  }\n\n  // Serve static files\n  arr.push(express.static(opts.static));\n\n  // No cache for IE\n  // https://support.microsoft.com/en-us/kb/234067\n  arr.push(function (req, res, next) {\n    res.header('Cache-Control', 'no-cache');\n    res.header('Pragma', 'no-cache');\n    res.header('Expires', '-1');\n    next();\n  });\n\n  // Read-only\n  if (opts.readOnly) {\n    arr.push(function (req, res, next) {\n      if (req.method === 'GET') {\n        next(); // Continue\n      } else {\n        res.sendStatus(403); // Forbidden\n      }\n    });\n  }\n\n  return arr;\n};","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/router/index.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar express = require('express');\nvar methodOverride = require('method-override');\nvar _ = require('lodash');\nvar lodashId = require('lodash-id');\nvar low = require('lowdb');\nvar fileAsync = require('lowdb/lib/storages/file-async');\nvar bodyParser = require('../body-parser');\nvar validateData = require('./validate-data');\nvar plural = require('./plural');\nvar nested = require('./nested');\nvar singular = require('./singular');\nvar mixins = require('../mixins');\n\nmodule.exports = function (source) {\n  // Create router\n  var router = express.Router();\n\n  // Add middlewares\n  router.use(methodOverride());\n  router.use(bodyParser);\n\n  // Create database\n  var db = void 0;\n  if (_.isObject(source)) {\n    db = low();\n    db.setState(source);\n  } else {\n    db = low(source, { storage: fileAsync });\n  }\n\n  validateData(db.getState());\n\n  // Add lodash-id methods to db\n  db._.mixin(lodashId);\n\n  // Add specific mixins\n  db._.mixin(mixins);\n\n  // Expose database\n  router.db = db;\n\n  // Expose render\n  router.render = function (req, res) {\n    res.jsonp(res.locals.data);\n  };\n\n  // GET /db\n  router.get('/db', function (req, res) {\n    res.jsonp(db.getState());\n  });\n\n  // Handle /:parent/:parentId/:resource\n  router.use(nested());\n\n  // Create routes\n  db.forEach(function (value, key) {\n    if (_.isPlainObject(value)) {\n      router.use('/' + key, singular(db, key));\n      return;\n    }\n\n    if (_.isArray(value)) {\n      router.use('/' + key, plural(db, key));\n      return;\n    }\n\n    var msg = 'Type of \"' + key + '\" (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + (_.isObject(source) ? '' : 'in ' + source) + ' is not supported. ' + 'Use objects or arrays of objects.';\n\n    throw new Error(msg);\n  }).value();\n\n  router.use(function (req, res) {\n    if (!res.locals.data) {\n      res.status(404);\n      res.locals.data = {};\n    }\n\n    router.render(req, res);\n  });\n\n  router.use(function (err, req, res, next) {\n    console.error(err.stack);\n    res.status(500).send(err.stack);\n  });\n\n  return router;\n};","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/body-parser.js":"'use strict';\n\nvar bodyParser = require('body-parser');\n\nmodule.exports = [bodyParser.json({ limit: '10mb', extended: false }), bodyParser.urlencoded({ extended: false })];","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/router/validate-data.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _ = require('lodash');\n\nfunction validateKey(key) {\n  if (key.indexOf('/') !== -1) {\n    var msg = ['Oops, found / character in database property \\'' + key + '\\'.', '', '/ aren\\'t supported, if you want to tweak default routes, see', 'https://github.com/typicode/json-server/tree/next#add-custom-routes'].join('\\n');\n    throw new Error(msg);\n  }\n}\n\nmodule.exports = function (obj) {\n  if (_.isPlainObject(obj)) {\n    Object.keys(obj).forEach(validateKey);\n  } else {\n    throw new Error('Data must be an object. Found ' + (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) + '.' + 'See https://github.com/typicode/json-server for example.');\n  }\n};","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/router/plural.js":"'use strict';\n\nvar express = require('express');\nvar _ = require('lodash');\nvar pluralize = require('pluralize');\nvar write = require('./write');\nvar getFullURL = require('./get-full-url');\nvar utils = require('../utils');\n\nmodule.exports = function (db, name) {\n  // Create router\n  var router = express.Router();\n\n  // Embed function used in GET /name and GET /name/id\n  function embed(resource, e) {\n    e && [].concat(e).forEach(function (externalResource) {\n      if (db.get(externalResource).value) {\n        var query = {};\n        var singularResource = pluralize.singular(name);\n        query[singularResource + 'Id'] = resource.id;\n        resource[externalResource] = db.get(externalResource).filter(query).value();\n      }\n    });\n  }\n\n  // Expand function used in GET /name and GET /name/id\n  function expand(resource, e) {\n    e && [].concat(e).forEach(function (innerResource) {\n      var plural = pluralize(innerResource);\n      if (db.get(plural).value()) {\n        var prop = innerResource + 'Id';\n        resource[innerResource] = db.get(plural).getById(resource[prop]).value();\n      }\n    });\n  }\n\n  // GET /name\n  // GET /name?q=\n  // GET /name?attr=&attr=\n  // GET /name?_end=&\n  // GET /name?_start=&_end=&\n  // GET /name?_embed=&_expand=\n  function list(req, res, next) {\n    // Resource chain\n    var chain = db.get(name);\n\n    // Remove q, _start, _end, ... from req.query to avoid filtering using those\n    // parameters\n    var q = req.query.q;\n    var _start = req.query._start;\n    var _end = req.query._end;\n    var _page = req.query._page;\n    var _sort = req.query._sort;\n    var _order = req.query._order;\n    var _limit = req.query._limit;\n    var _embed = req.query._embed;\n    var _expand = req.query._expand;\n    delete req.query.q;\n    delete req.query._start;\n    delete req.query._end;\n    delete req.query._sort;\n    delete req.query._order;\n    delete req.query._limit;\n    delete req.query._embed;\n    delete req.query._expand;\n\n    // Automatically delete query parameters that can't be found\n    // in the database\n    Object.keys(req.query).forEach(function (query) {\n      var arr = db.get(name).value();\n      for (var i in arr) {\n        if (_.has(arr[i], query) || query === 'callback' || query === '_' || /_lte$/.test(query) || /_gte$/.test(query) || /_ne$/.test(query) || /_like$/.test(query)) return;\n      }\n      delete req.query[query];\n    });\n\n    if (q) {\n      // Full-text search\n      if (Array.isArray(q)) {\n        q = q[0];\n      }\n\n      q = q.toLowerCase();\n\n      chain = chain.filter(function (obj) {\n        for (var key in obj) {\n          var value = obj[key];\n          if (db._.deepQuery(value, q)) {\n            return true;\n          }\n        }\n      });\n    }\n\n    Object.keys(req.query).forEach(function (key) {\n      // Don't take into account JSONP query parameters\n      // jQuery adds a '_' query parameter too\n      if (key !== 'callback' && key !== '_') {\n        (function () {\n          // Always use an array, in case req.query is an array\n          var arr = [].concat(req.query[key]);\n\n          chain = chain.filter(function (element) {\n            return arr.map(function (value) {\n              var isDifferent = /_ne$/.test(key);\n              var isRange = /_lte$/.test(key) || /_gte$/.test(key);\n              var isLike = /_like$/.test(key);\n              var path = key.replace(/(_lte|_gte|_ne|_like)$/, '');\n              var elementValue = _.get(element, path);\n\n              if (elementValue === undefined) {\n                return;\n              }\n\n              if (isRange) {\n                var isLowerThan = /_gte$/.test(key);\n\n                return isLowerThan ? value <= elementValue : value >= elementValue;\n              } else if (isDifferent) {\n                return value !== elementValue.toString();\n              } else if (isLike) {\n                return new RegExp(value, 'i').test(elementValue.toString());\n              } else {\n                return value === elementValue.toString();\n              }\n            }).reduce(function (a, b) {\n              return a || b;\n            });\n          });\n        })();\n      }\n    });\n\n    // Sort\n    if (_sort) {\n      _order = _order || 'ASC';\n\n      chain = chain.sortBy(function (element) {\n        return _.get(element, _sort);\n      });\n\n      if (_order === 'DESC') {\n        chain = chain.reverse();\n      }\n    }\n\n    // Slice result\n    if (_end || _limit || _page) {\n      res.setHeader('X-Total-Count', chain.size());\n      res.setHeader('Access-Control-Expose-Headers', 'X-Total-Count' + (_page ? ', Link' : ''));\n    }\n\n    if (_page) {\n      _page = parseInt(_page, 10);\n      _page = _page >= 1 ? _page : 1;\n      _limit = parseInt(_limit, 10) || 10;\n      var page = utils.getPage(chain.value(), _page, _limit);\n      var links = {};\n      var fullURL = getFullURL(req);\n\n      if (page.first) {\n        links.first = fullURL.replace('page=' + page.current, 'page=' + page.first);\n      }\n\n      if (page.prev) {\n        links.prev = fullURL.replace('page=' + page.current, 'page=' + page.prev);\n      }\n\n      if (page.next) {\n        links.next = fullURL.replace('page=' + page.current, 'page=' + page.next);\n      }\n\n      if (page.last) {\n        links.last = fullURL.replace('page=' + page.current, 'page=' + page.last);\n      }\n\n      res.links(links);\n      chain = _.chain(page.items);\n    } else if (_end) {\n      _start = parseInt(_start, 10) || 0;\n      _end = parseInt(_end, 10);\n      chain = chain.slice(_start, _end);\n    } else if (_limit) {\n      _start = parseInt(_start, 10) || 0;\n      _limit = parseInt(_limit, 10);\n      chain = chain.slice(_start, _start + _limit);\n    }\n\n    // embed and expand\n    chain = chain.cloneDeep().forEach(function (element) {\n      embed(element, _embed);\n      expand(element, _expand);\n    });\n\n    res.locals.data = chain.value();\n    next();\n  }\n\n  // GET /name/:id\n  // GET /name/:id?_embed=&_expand\n  function show(req, res, next) {\n    var _embed = req.query._embed;\n    var _expand = req.query._expand;\n    var resource = db.get(name).getById(req.params.id).value();\n\n    if (resource) {\n      // Clone resource to avoid making changes to the underlying object\n      var clone = _.cloneDeep(resource);\n\n      // Embed other resources based on resource id\n      // /posts/1?_embed=comments\n      embed(clone, _embed);\n\n      // Expand inner resources based on id\n      // /posts/1?_expand=user\n      expand(clone, _expand);\n\n      res.locals.data = clone;\n    }\n\n    next();\n  }\n\n  // POST /name\n  function create(req, res, next) {\n    var resource = db.get(name).insert(req.body).value();\n\n    res.setHeader('Access-Control-Expose-Headers', 'Location');\n    res.location(getFullURL(req) + '/' + resource.id);\n\n    res.status(201);\n    res.locals.data = resource;\n\n    next();\n  }\n\n  // PUT /name/:id\n  // PATCH /name/:id\n  function update(req, res, next) {\n    var id = req.params.id;\n    var chain = db.get(name);\n\n    chain = req.method === 'PATCH' ? chain.updateById(id, req.body) : chain.replaceById(id, req.body);\n\n    var resource = chain.value();\n\n    if (resource) {\n      res.locals.data = resource;\n    }\n\n    next();\n  }\n\n  // DELETE /name/:id\n  function destroy(req, res, next) {\n    var resource = db.get(name).removeById(req.params.id).value();\n\n    // Remove dependents documents\n    var removable = db._.getRemovable(db.getState());\n\n    removable.forEach(function (item) {\n      db.get(item.name).removeById(item.id).value();\n    });\n\n    if (resource) {\n      res.locals.data = {};\n    }\n\n    next();\n  }\n\n  var w = write(db);\n\n  router.route('/').get(list).post(create, w);\n\n  router.route('/:id').get(show).put(update, w).patch(update, w).delete(destroy, w);\n\n  return router;\n};","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/router/write.js":"\"use strict\";\n\nmodule.exports = function write(db) {\n  return function (req, res, next) {\n    db.write();\n    next();\n  };\n};","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/router/get-full-url.js":"'use strict';\n\nvar url = require('url');\n\nmodule.exports = function getFullURL(req) {\n  var root = url.format({\n    protocol: req.protocol,\n    host: req.get('host')\n  });\n\n  return '' + root + req.originalUrl;\n};","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/utils.js":"\"use strict\";\n\nmodule.exports = {\n  getPage: getPage\n};\n\nfunction getPage(array, page, perPage) {\n  var obj = {};\n  var start = (page - 1) * perPage;\n  var end = page * perPage;\n\n  obj.items = array.slice(start, end);\n  if (obj.items.length === 0) {\n    return obj;\n  }\n\n  if (page > 1) {\n    obj.prev = page - 1;\n  }\n\n  if (end < array.length) {\n    obj.next = page + 1;\n  }\n\n  if (obj.items.length !== array.length) {\n    obj.current = page;\n    obj.first = 1;\n    obj.last = Math.ceil(array.length / perPage);\n  }\n\n  return obj;\n}","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/router/nested.js":"'use strict';\n\nvar express = require('express');\nvar pluralize = require('pluralize');\n\nmodule.exports = function () {\n  var router = express.Router();\n\n  // Rewrite URL (/:resource/:id/:nested -> /:nested) and request query\n  function get(req, res, next) {\n    var prop = pluralize.singular(req.params.resource);\n    req.query[prop + 'Id'] = req.params.id;\n    req.url = '/' + req.params.nested;\n    next();\n  }\n\n  // Rewrite URL (/:resource/:id/:nested -> /:nested) and request body\n  function post(req, res, next) {\n    var prop = pluralize.singular(req.params.resource);\n    req.body[prop + 'Id'] = req.params.id;\n    req.url = '/' + req.params.nested;\n    next();\n  }\n\n  return router.get('/:resource/:id/:nested', get).post('/:resource/:id/:nested', post);\n};","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/router/singular.js":"'use strict';\n\nvar express = require('express');\nvar write = require('./write');\nvar getFullURL = require('./get-full-url');\n\nmodule.exports = function (db, name) {\n  var router = express.Router();\n\n  function show(req, res, next) {\n    res.locals.data = db.get(name).value();\n    next();\n  }\n\n  function create(req, res, next) {\n    db.set(name, req.body).value();\n    res.locals.data = db.get(name).value();\n\n    res.setHeader('Access-Control-Expose-Headers', 'Location');\n    res.location('' + getFullURL(req));\n\n    res.status(201);\n    next();\n  }\n\n  function update(req, res, next) {\n    if (req.method === 'PUT') {\n      db.set(name, req.body).value();\n    } else {\n      db.get(name).assign(req.body).value();\n    }\n\n    res.locals.data = db.get(name).value();\n    next();\n  }\n\n  var w = write(db);\n\n  router.route('/').get(show).post(create, w).put(update, w).patch(update, w);\n\n  return router;\n};","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/mixins.js":"'use strict';\n\nvar shortid = require('shortid');\nvar pluralize = require('pluralize');\n\nmodule.exports = {\n  getRemovable: getRemovable,\n  createId: createId,\n  deepQuery: deepQuery\n};\n\n// Returns document ids that have unsatisfied relations\n// Example: a comment that references a post that doesn't exist\nfunction getRemovable(db) {\n  var _ = this;\n  var removable = [];\n  _.each(db, function (coll, collName) {\n    _.each(coll, function (doc) {\n      _.each(doc, function (value, key) {\n        if (/Id$/.test(key)) {\n          var refName = pluralize.plural(key.slice(0, -2));\n          // Test if table exists\n          if (db[refName]) {\n            // Test if references is defined in table\n            var ref = _.getById(db[refName], value);\n            if (_.isUndefined(ref)) {\n              removable.push({ name: collName, id: doc.id });\n            }\n          }\n        }\n      });\n    });\n  });\n\n  return removable;\n}\n\n// Return incremented id or uuid\n// Used to override lodash-id's createId with utils.createId\nfunction createId(coll) {\n  var _ = this;\n  var idProperty = _.__id();\n  if (_.isEmpty(coll)) {\n    return 1;\n  } else {\n    var id = _(coll).maxBy(idProperty)[idProperty];\n\n    // Increment integer id or generate string id\n    return _.isFinite(id) ? ++id : shortid.generate();\n  }\n}\n\nfunction deepQuery(value, q) {\n  var _ = this;\n  if (value && q) {\n    if (_.isArray(value)) {\n      for (var i = 0; i < value.length; i++) {\n        if (_.deepQuery(value[i], q)) {\n          return true;\n        }\n      }\n    } else if (_.isObject(value) && !_.isArray(value)) {\n      for (var k in value) {\n        if (_.deepQuery(value[k], q)) {\n          return true;\n        }\n      }\n    } else if (value.toString().toLowerCase().indexOf(q) !== -1) {\n      return true;\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-json-server/json-server/lib/server/rewriter.js":"'use strict';\n\nvar express = require('express');\nvar url = require('url');\nvar _ = require('lodash');\nfunction updateQueryString(target, sourceUrl) {\n  return ~sourceUrl.indexOf('?') ? _.assign(target, url.parse(sourceUrl, true).query) : {};\n}\nmodule.exports = function (routes) {\n  var router = express.Router();\n\n  router.get('/__rules', function (req, res) {\n    res.json(routes);\n  });\n\n  Object.keys(routes).forEach(function (route) {\n    if (route.indexOf(':') !== -1) {\n      router.all(route, function (req, res, next) {\n        // Rewrite target url using params\n        var target = routes[route];\n        for (var param in req.params) {\n          target = target.replace(':' + param, req.params[param]);\n        }\n        req.url = target;\n        req.query = updateQueryString(req.query, req.url);\n        next();\n      });\n    } else {\n      router.all(route + '*', function (req, res, next) {\n        // Rewrite url by replacing prefix\n        req.url = req.url.replace(route, routes[route]);\n        req.query = updateQueryString(req.query, req.url);\n        next();\n      });\n    }\n  });\n\n  return router;\n};"}